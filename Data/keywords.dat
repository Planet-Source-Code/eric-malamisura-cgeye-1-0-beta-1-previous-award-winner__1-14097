abs#{returns absolute value} method: abs [VALUE]
accept#{accept incoming socket connection} method: accept [NEWSOCKET],[GENERICSOCKET]
alarm#{sends SIGALRM to program after x sec} method: alarm[SECONDS]
atan2#{Returns arctangent Y/X in range -p to p} method: atan2 [Y],[X]
bind#{bind network address to socket} method: bind [SOCKET],[NAME]
binmode#{accepts filehandle as arg, specifies binary write} method: binmode [FILEHANDLE]
bless#{assign reference to classname} method: bless [REFERENCE],[CLASSNAME]
caller#{returns context of subroutine call} method: caller [EXPR]
chdir#{set directory to expr} method: chdir [EXPR]
chmod#{set file permission to SUID bit} method: chmod [SUID],[FILE]
chomp#{remove line endings} method: chomp [VARIABLE/LIST]
chop#{remove last char from string} method: chop [VARIABLE/LIST]
chown#{set user/group ownership files in list} method: chown [LIST]
chr#{returns character in ASCII table} method: chr [NUMBER]
chroot#{use DIRNAME as ROOTDIR} method: chrroot [DIRNAME]
close#{close filehandle} method: close [FILEHANDLE]
closedir#{close directory} method: closedir [DIRHANDLE]
connect#{connect to remote socket} method: connect [SOCKET],[NAME]
cos#{returns cosine of EXPR} method: cos [EXPR]
crypt#{encrypt strings UNIX format} method: [PLAINTEXT],[SALT]
dbmclose#{break binding between HASH & DBM file} method: dbmclose [HASH]
dbmopen#{bind dbm,ndbm,sdbm,gdbm,bdb to hash} method: dbmopen [HASH],[DBNAME],[MODE]
defined#{return undefined value of expr} method: defined [EXPR]
delete#{remove element EXPR from hash} method: delete [EXPR]
die#method: die [LIST]
do#method: do [BLOCK] ;do [SUBROUTINE(LIST)] ;do[EXPR]
dump#{dump core} method: dump [LABEL]
each#{grab values from hash] method: each [HASH]
eof#{returns 1 as End Of File} method: eof [FILEHANDLE] ;eof(); eof
eval#{exec block of code as one} method: eval [EXPR]
exec#{executes sys command no return unless null} method: exec [LIST]
exists#{check key defined in hash} method: exists [EXPR]
exit#{evaluate EXPR and exits program} method: exit [EXPR]
exp#{returns e to the power of EXPR} method: exp [EXPR]
fcntl#{emulate fcntl(2) system call} method: fcntl [FILEHANDLE],[FUNCTION],[SCALAR]
fileno#{return file descriptor for FILEHANDLE} method: fileno [FILEHANDLE]
flock#{calls fock(2) system call on FILEHANDLE} method: flock [FILEHANDLE],[OPERATION]
fork#{fork system call into seperate process} method: fork
format#method: format
formline#{format LIST according to PICTURE} method: formline [PICTURE, LIST]
getc#{returns next char from FILEHANDLE} method: getc [FILEHANDLE]
getlogin#{return login from /etc/utmp} method: getlogin
getpeername#{returns packet sockaddr from OE of SOCKET} method: getpeername [SOCKET] 
getpgrp#{returns process group for PID} method: getpgrp [PID]
getppid#{returns process ID for parent proc or cur proc} method: getppid
getpriority#{returns process priority} method: getpriority [WHICH],[WHO]
getsockname#{returns packed sockaddr} method: getsocketname [SOCKET]
getsockopt#{returns requested option} method: getsockopt [SOCKET],[LEVEL],[OPTNAME]
glob#{returns value of EXPR with fn expansions} method: glob [EXPR]
gmtime#{convert time format returned by time function} method: gmtime [EXPR]
goto#{goto specified EXPR,LABLE,&NAME} method: goto [LABEL]; goto [EXPR]; goto [&NAME]
grep#{search list for EXPR} method: grep [EXPR],[LIST]
hex#{reads EXPR as hexadecimal string} method: hex [EXPR]
import#method: import [CLASSNAME [LIST]]
index#{locat substring within larger string} method: index [STR],[SUBSTR],[[POSITION]]
int#{returns integer portion of string} method: int [EXPR]
ioctl#{used to implement ioctl(2) system call} method: ioctl [FILEHANDLE],[FUNCTION],[SCALAR]
join#{join list elements into string} method: join [EXPR],[LIST]
keys#{returns keys in HASH} method: keys [HASH]
kill#{send signal to list of processes} method: kill [LIST]
last#{exit loop specified by LABEL} method: last [LABEL]
lc#{convert characters to lowercase} method: lc [EXPR]
lcfirst#{conver first char to lowercase} method: lcfirst [EXPR]
length#{returns length of string in bytes} method: length [EXPR]
link#{create HARD link form OLDFILE to NEWFILE} method: linke [OLDFILE],[NEWFILE]
listen#method: listen [SOCKET],[QUESIZE]
local#{specifies variable will be local} method: local [EXPR]
localtime#{same as gmtime} method: local [EXPR]
log#{returns logarithm of base e or EXPR} method: log [EXPR]
lstat#method: lstat [FILEHANDLE]; lstat [EXPR]; lstat
map#method: map [BLOCK LIST]; map [EXPR], [LIST]
mkdir#{creates new directory} method: [FILENAME],[MODE]
msgctl#{calls msgctl(2) system call} method: [ID],[CMD],[ARG]
msgget#{calls system V IPC function msgget} method: msgget [KEY],[FLAGS]
msgrcv#{calls system V IPC function msgrcv} method: msgrcv [ID],[VAR],[SIZE],[TYPE],[FLAGS]
msgsnd#{calls system V IPC function msgsnd} method: msgsnd [ID],[MSG],[FLAGS]
my#{scope listed variables to local block} method: my [EXPR]
next#method: next [LABEL]; next
no#method: no [MODULE LIST]
oct#{reads EXPR as octal string returning decimal value} method: oct [EXPR]
open#{open file specified in EXPR as FILEHANDLE} method: open ([FILEHANDLE],[EXPR])
opendir#{opens dir specified for input as FILEHANDLE} method: opendir ([DIRHANDLE],[EXPR])
ord#{returns ASCII value of first char in EXPR} method: ord [EXPR]
pack#{packs list of variable into binary structure} method: pack [TEMPLATE],[LIST]
package#{variables inside enclosing block belong to NAMESPACE} method: package [NAMESPACE]
pipe#{opens pipe from READHANDLE to WRITEHANDLE} method: pipe [READHANDLE],[WRITEHANDLE]
pop#{removes last item in array} method: pop [ARRAY]
pos#{returns last SCALAR pos from m//g search} method: pos [SCALAR]
print#{output data into standard output form} method: print [FILEHANDLE]; print [LIST]; print
printf#{print out using printf convention set} method: printf [FILEHANDLE LIST]; printf [LIST]
push#{add element onto end of array} method: push [ARRAY],[LIST]
quotemeta#{returns EXPR with non-alpha escaped in backslashes} method: quotemeta [EXPR]
rand#{returns random number between 0 and EXPR} method: rand [EXPR]
read#{read arbitrary number of bytes from FILEHANDLE} method: read [FILEHANDLE],[SCALAR],[LENGTH],[[OFFSET]]
readdir#{read entries from opened directroy} method: readdir [DIRHANDLE]
readlink#{reads value of symbolic link} method: readlink [EXPR]
recv#{recieve messages from socket} method: recv: [SOCKET],[SCALAR],[LEN],[FLAGS]
redo#{restarts current loop block} method: redo [LABEL]
ref#{returns true if EXPR is reference} method: ref [EXPR]
rename#{rename file OLDNAME to NEWNAME} method: rename [OLDNAME],[NEWNAME]
require#method: require [EXPR]
reset#{clear global variables} method: reset [EXPR]
return#{suspends execution of eval,subroutine,or do and returns EXPR} method: return [EXPR]
reverse#{reverses order of characters in SCALAR} method: reverse [LIST]
rewinddir#{reset directory handle} method: rewdindir [DIRHANDLE]
remdir#{removes directory FILENAME} method: rmdir [FILENAME]
scalar#{evaluates EXPR into scalar context} method: scalar [EXPR]
seek#{set position of FILEHANDLE} method: seek [FILEHANDLE],[OFFSET],[WHENCE]
seekdir#{sets position of DIRHANDLE for readir function} method: seekdir [DIRHANDLE],[POS]
select#{returns currently selected filehandle} method: select [FILEHANDLE]
semctl#{calls system V IPC system call semctl(2)} method: semctl [ID],[SEMNUM],[CMD],[ARG]
semget#{calls system V IPC system call semget(2)} method: semget [KEY],[NSEMS],[SIZE],[FLAGS]
semop#{calls system V IPC system call semop(2)} method: semop [KEY],[OPSTRING]
send#{send message over socket} method: send [SOCKET],[MSG],[FLAGS],[TO]
setpgrp#{set access group of specified PID} method: setpgrp [PID],[PGRP]
setpriority#{set priority for process or group} method: setpriority [WHICH],[WHO],[PRIORITY]
setsockopt#{set specified option for socket} method: [SOCKET],[LEVEL],[OPTNAME],[OPTVAL]
shift#{removes first value from array and returns scalar} method: shift [ARRAY]
shmctl#{calls the system V shmctl(2) system call} method: shmctl [ID],[CMD],[ARG]
shmget#{call the system V shmget(2) system call} method: shmget [KEY],[SIZE],[FLAGS]
shmread#{calls the system V shmrad(2) system call} method: shmread [ID],[VAR],[POS],[SIZE]
shmwrite#{calls the system V shmwrite(2) system call} method: shmwrite [ID],[STRING],[POS],[SIZE]
shutdown#{closes socket in specified HOW manner} method: shutdown [SOCKET],[HOW]
sin#{returns the sine of EXPR} method: sin [EXPR]
sleep#{causes program to sleep for EXPR seconds} method: sleep [EXPR]
socket#{used to open socket attached to FILEHANDLE SOCKET} method: socket [SOCKET],[DOMAIN],[TYPE],[PAIR]
socketpair#{creates pair of unnamed sockets} method: socketpair [SOCKET1],[SOCKET2],[DOMAIN],[TYPE],[PAIR]
sort#{sort entires in list and return sorted list} method: sort [LIST]
splice#method: splice [ARRAY],[OFFSET],[LENGTH],[LIST]
split#{break string into multiple parts} method: split [/PATTERN/],[EXPR],[LIMIT]
sprintf#{format strings using C sprintf format} method: sprintf [FORMAT],[LIST]
sqrt#{returns square root of EXPR} method: sqrt [EXPR]
srand#{seeds random number generator} method: srand [EXPR]
stat#{returns information specified in FILEHANDLE} method: stat [FILEHANDLE]
study#method: study [SCALAR]
substr#{extract characters from string} method: substr [EXPR],[OFFSET],[LENGTH]
symlink#{used to creat symbolic link from OLDFILE to NEWFILE} method: symlink [OLDFILE],[NEWFILE]
syscall#{calls system call as first item in list} method: syscall [LIST]
sysopen#{open file specified as FILENAME} method: sysopen [FILEHANDLE,[FILENAME],[MODE]
sysread#{read LENGTH bytes from FILEHANDLE into SCALAR} method: sysread [FILEHANDLE],[SCALAR],[LENGTH],[OFFSET]
sysseek#method: sysseek [FILEHANDLE],[POSITION],[WHENCE]
system#{EXEC LIST with NEW PROCESS} method: system [LIST]
syswrite#{writes LENTH bytes from SCALAR to FILEHANDLE} method: syswrite [FILEHANDLE],[SCALAR],[LENGTH],[OFFSET]
tell#{returns specified position for filehandle} method: tell [FILEHANDLE]
telldir#{returns current position in DIRHANDLE} method: telldir [DIRHANDLE]
tie#{binds variable to package class} method: tie [VARIABLE],[CLASSNAME],[LIST]
tied#{returns reference to underlying object of VARIABLE} method: tied [VARIABLE]
time#{time since the epoch in seconds} method: time
times#{returns four time element arrays} method: times
truncate#{truncate file assigned to FILEHANDLe} method: truncate [FILEHANDLE],[LENGTH]
uc#{converts string to uppercase} method: uc [EXPR]
ucfirst#{converts first letter of EXPR to uppercase} method: ucfirst [EXPR]
umask#{set default umask for process} method: umask [EXPR]
undef#{eliminate value of variable} method: undef [EXPR]
unlink#{deletes file passed to it via LIST} method: unlink ([LIST])
unpack#{translates data structure into list} method: unpack [TEMPLATE],[EXPR]
unshift#{inserts scalar value as first element in array} method: unshift [ARRAY],[LIST]
utime#method: utime [LIST]
values#{returns array of each HASH item value} method: values [HASH]
vec#{treats string as vector of unassigned numbers} method: vec [EXPR],[OFFSET],[BITS]
wait#{waits for child process to die} method: wait
waitpid#{waits for child process to exit} method: waitpid [PID],[FLAGS]
wantarray#{returns true if subroutine requires list value} method: wantarray
warn#{print standard error without termination} method: ward [LIST]
write#{used to output data using template defined} method: write FILEHANDLE
